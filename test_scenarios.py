#!/usr/bin/env python3
"""
Script de test automatis√© pour l'application de booking
"""

import json
import sys
from datetime import datetime

def load_test_data():
    """Charge les donn√©es de test"""
    try:
        with open('clubs.json', 'r') as f:
            clubs = json.load(f)['clubs']
        with open('competitions.json', 'r') as f:
            competitions = json.load(f)['competitions']
        return clubs, competitions
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement des donn√©es: {e}")
        return None, None

def test_data_integrity(clubs, competitions):
    """Test l'int√©grit√© des donn√©es"""
    print("üîç Test de l'int√©grit√© des donn√©es...")
    
    # Test des clubs
    for club in clubs:
        print(f"üìã Club: {club['name']}")
        print(f"   Email: {club['email']}")
        print(f"   Points: {club['points']}")
        
        # V√©rification des points
        try:
            points = int(club['points'])
            if points < 0:
                print(f"   ‚ö†Ô∏è  Points n√©gatifs!")
            elif points == 0:
                print(f"   ‚ö†Ô∏è  Aucun point disponible")
            else:
                print(f"   ‚úÖ Points valides")
        except ValueError:
            print(f"   ‚ùå Points invalides: {club['points']}")
    
    # Test des comp√©titions
    for comp in competitions:
        print(f"üèÜ Comp√©tition: {comp['name']}")
        print(f"   Date: {comp['date']}")
        print(f"   Places: {comp['numberOfPlaces']}")
        
        # V√©rification de la date
        try:
            comp_date = datetime.strptime(comp['date'], '%Y-%m-%d %H:%M:%S')
            now = datetime.now()
            if comp_date < now:
                print(f"   ‚ö†Ô∏è  COMP√âTITION PASS√âE!")
            else:
                print(f"   ‚úÖ Comp√©tition future")
        except ValueError:
            print(f"   ‚ùå Date invalide: {comp['date']}")
        
        # V√©rification des places
        try:
            places = int(comp['numberOfPlaces'])
            if places <= 0:
                print(f"   ‚ö†Ô∏è  Aucune place disponible")
            else:
                print(f"   ‚úÖ Places disponibles")
        except ValueError:
            print(f"   ‚ùå Places invalides: {comp['numberOfPlaces']}")

def generate_test_scenarios(clubs, competitions):
    """G√©n√®re des sc√©narios de test sp√©cifiques"""
    print("\nüéØ Sc√©narios de test recommand√©s:")
    
    # Sc√©narios d'erreur
    print("\nüö® TESTS D'ERREUR:")
    
    # Test 1: Email inexistant
    print("1. Email inexistant:")
    print("   - Email: test@inexistant.com")
    print("   - R√©sultat attendu: 'Sorry, that email wasn't found.'")
    
    # Test 2: Trop de places
    print("\n2. Trop de places:")
    for club in clubs:
        if int(club['points']) > 0:
            print(f"   - Club: {club['name']} ({club['points']} points)")
            print(f"   - Email: {club['email']}")
            print(f"   - Places √† tester: {int(club['points']) + 5}")
            print("   - R√©sultat attendu: 'Not enough points available!'")
            break
    
    # Test 3: Plus de 12 places
    print("\n3. Plus de 12 places:")
    for club in clubs:
        if int(club['points']) >= 12:
            print(f"   - Club: {club['name']} ({club['points']} points)")
            print(f"   - Email: {club['email']}")
            print("   - Places √† tester: 15")
            print("   - R√©sultat attendu: 'Cannot book more than 12 places!'")
            break
    
    # Test 4: Comp√©tition pass√©e
    print("\n4. Comp√©tition pass√©e:")
    for comp in competitions:
        try:
            comp_date = datetime.strptime(comp['date'], '%Y-%m-%d %H:%M:%S')
            if comp_date < datetime.now():
                print(f"   - Comp√©tition: {comp['name']} ({comp['date']})")
                print("   - R√©sultat attendu: 'Cannot book places for past competitions!'")
                break
        except ValueError:
            continue
    
    # Sc√©narios de succ√®s
    print("\n‚úÖ TESTS DE SUCC√àS:")
    
    # Test 5: R√©servation normale
    print("5. R√©servation normale:")
    for club in clubs:
        if int(club['points']) >= 5:
            print(f"   - Club: {club['name']} ({club['points']} points)")
            print(f"   - Email: {club['email']}")
            print("   - Places √† tester: 5")
            print("   - R√©sultat attendu: 'Great-booking complete!'")
            break

def check_current_issues():
    """V√©rifie les probl√®mes actuels du code"""
    print("\n‚ö†Ô∏è  PROBL√àMES IDENTIFI√âS DANS VOTRE VERSION:")
    
    issues = [
        "‚ùå Validation HTML supprim√©e (attributs required, min, max manquants)",
        "‚ùå Messages flash supprim√©s dans booking.html",
        "‚ùå Persistance des donn√©es supprim√©e (saveClubs, saveCompetitions)",
        "‚ùå Validation des comp√©titions pass√©es supprim√©e",
        "‚ùå Balise HTML incorrecte (</br> au lieu de <br />)",
        "‚ùå Validation du nombre minimum de places supprim√©e"
    ]
    
    for issue in issues:
        print(f"   {issue}")
    
    print("\nüí° RECOMMANDATIONS:")
    print("   1. Tester d'abord les fonctionnalit√©s de base qui marchent encore")
    print("   2. V√©rifier que les corrections principales sont toujours actives")
    print("   3. Noter quelles validations ne fonctionnent plus")

def main():
    """Fonction principale"""
    print("üöÄ D√âMARRAGE DES TESTS DE L'APPLICATION DE BOOKING\n")
    
    # Chargement des donn√©es
    clubs, competitions = load_test_data()
    if not clubs or not competitions:
        print("‚ùå Impossible de continuer les tests")
        sys.exit(1)
    
    # Test de l'int√©grit√© des donn√©es
    test_data_integrity(clubs, competitions)
    
    # G√©n√©ration des sc√©narios de test
    generate_test_scenarios(clubs, competitions)
    
    # V√©rification des probl√®mes actuels
    check_current_issues()
    
    print("\nüéØ PR√äT POUR LES TESTS MANUELS!")
    print("   1. Lancez le serveur: python server.py")
    print("   2. Ouvrez: http://127.0.0.1:5000")
    print("   3. Suivez les sc√©narios ci-dessus")

if __name__ == "__main__":
    main()
